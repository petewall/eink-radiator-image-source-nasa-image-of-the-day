// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"image"
	"sync"

	"github.com/petewall/eink-radiator-image-source-nasa-image-of-the-day/internal"
)

type FakeImageProcessor struct {
	Stub        func(string, int, int) (image.Image, error)
	mutex       sync.RWMutex
	argsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	returns struct {
		result1 image.Image
		result2 error
	}
	returnsOnCall map[int]struct {
		result1 image.Image
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImageProcessor) Spy(arg1 string, arg2 int, arg3 int) (image.Image, error) {
	fake.mutex.Lock()
	ret, specificReturn := fake.returnsOnCall[len(fake.argsForCall)]
	fake.argsForCall = append(fake.argsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.Stub
	returns := fake.returns
	fake.recordInvocation("ImageProcessor", []interface{}{arg1, arg2, arg3})
	fake.mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return returns.result1, returns.result2
}

func (fake *FakeImageProcessor) CallCount() int {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return len(fake.argsForCall)
}

func (fake *FakeImageProcessor) Calls(stub func(string, int, int) (image.Image, error)) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = stub
}

func (fake *FakeImageProcessor) ArgsForCall(i int) (string, int, int) {
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	return fake.argsForCall[i].arg1, fake.argsForCall[i].arg2, fake.argsForCall[i].arg3
}

func (fake *FakeImageProcessor) Returns(result1 image.Image, result2 error) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	fake.returns = struct {
		result1 image.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageProcessor) ReturnsOnCall(i int, result1 image.Image, result2 error) {
	fake.mutex.Lock()
	defer fake.mutex.Unlock()
	fake.Stub = nil
	if fake.returnsOnCall == nil {
		fake.returnsOnCall = make(map[int]struct {
			result1 image.Image
			result2 error
		})
	}
	fake.returnsOnCall[i] = struct {
		result1 image.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeImageProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mutex.RLock()
	defer fake.mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImageProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.ImageProcessor = new(FakeImageProcessor).Spy
